apply plugin: 'com.android.library'

android {
    compileSdkVersion Versions.vSdkCompile
    buildToolsVersion Versions.vBuildTool

    defaultConfig {
        minSdkVersion Versions.vSdkMin
        targetSdkVersion Versions.vSdkTarget
        versionCode Versions.vVersionCode
        versionName Versions.vVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api project(':slick-annotations')
    compileOnly Deps.depSupportAnnotation
    compileOnly Deps.depRxjava2

    testImplementation project(':slick-compiler')
//    testImplementation Deps.depJavax
    testImplementation Deps.depTestJunit
    testImplementation Deps.depTestTruth
    testImplementation Deps.depSupportAppCompat
    testImplementation Deps.depSupportAnnotation
    testImplementation Deps.depTestCompileTesting

    testImplementation files(getRuntimeJar())
    testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
}

task copyResDirectoryToClasses(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/intermediates/classes/test/debug/resources"
}

task deleteResDirectoryFromClasess(type: Delete){
    delete "${buildDir}/intermediates/classes/test/debug/resources"
}

copyResDirectoryToClasses.dependsOn(deleteResDirectoryFromClasess)
preBuild.dependsOn(copyResDirectoryToClasses)

def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists()) {
            return runtimeJar;
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

apply from: rootProject.file('local-maven.gradle')
