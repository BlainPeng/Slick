apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile project(':slick-annotations')
    provided 'com.android.support:support-annotations:26.1.0'

    testCompile 'junit:junit:4.12'

    testCompile 'com.google.truth:truth:0.35'
    testCompile 'com.google.testing.compile:compile-testing:0.10'

    testCompile 'javax.inject:javax.inject:1'
    testCompile 'com.android.support:support-annotations:26.1.0'
    testCompile 'com.android.support:appcompat-v7:26.1.0'
    testCompile project(':slick-compiler')

    androidTestCompile 'com.android.support:appcompat-v7:26.1.0'
    androidTestCompile 'com.android.support.constraint:constraint-layout:1.0.2'

    testImplementation 'org.mockito:mockito-core:2.7.22'
    androidTestImplementation 'org.mockito:mockito-android:2.7.22'

    testCompile files(getRuntimeJar())
    testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
//    testCompile files(file("${System.env.ANDROID_HOME}/platforms/android-25/android.jar"))
}

task copyResDirectoryToClasses(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/intermediates/classes/test/debug/resources"
}

task deleteResDirectoryFromClasess(type: Delete){
    delete "${buildDir}/intermediates/classes/test/debug/resources"
}

copyResDirectoryToClasses.dependsOn(deleteResDirectoryFromClasess)
preBuild.dependsOn(copyResDirectoryToClasses)

def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists()) {
            return runtimeJar;
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

apply from: rootProject.file('local-maven.gradle')